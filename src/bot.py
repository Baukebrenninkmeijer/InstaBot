
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: notebooks/4_bot.ipynb

import re
import sys
sys.path.append('src')
import lib
from scrape_image_data import retrieve_data
from user_data_aggregation import *
from upload_image import upload
import pandas as pd
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import os


from telegram import ReplyKeyboardMarkup
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, RegexHandler,
                          ConversationHandler)

api_token = lib.config['telegram']['api_token']
CHOOSING = range(1)

reply_keyboard = [['Upload', 'Retrieve data'],
                  ['Update followers', 'Retrieve additional info'],
                  ['Done']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)

def start(update, context):
    update.message.reply_text(
        "Hi! My name is TiacapanBot, after the Aztec god of sexual hunger. I can manage your instagram bot.",
        reply_markup=markup)

    return CHOOSING


def done(update, context):
    update.message.reply_text("Done! Come Again.")
    return ConversationHandler.END

def check_user(update):
    if update.message.from_user['username'] != 'Bauke':
        update.message.reply_text('not authorized bruh')
        return CHOOSING


def upload_handler(update, context):
    check_user(update)
    update.message.reply_text("Uploading photo...")
    im_path = upload(test=False, robocall=True)
    update.message.reply_photo(photo=open(im_path, 'rb'))
    update.message.reply_text("Done.", reply_markup=markup)
    os.remove(im_path)
    return CHOOSING


def update_followers_handler(update, context):
    check_user(update)
    update.message.reply_text("Updating followers")
    update_followers()
    update.message.reply_text("Done.", reply_markup=markup)
    return CHOOSING


def retrieve_data_handler(update, context):
    check_user(update)
    update.message.reply_text("Retrieving data...")
    retrieve_data()
    update.message.reply_text("Done.", reply_markup=markup)
    return CHOOSING


def retrieve_additional_information_handler(update, context):
    check_user(update)
    update.message.reply_text("Retrieving additional information...")
    retrieve_additional_information()
    update.message.reply_text("Done.", reply_markup=markup)
    return CHOOSING


def error(update, context):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, error)


def telegram_bot():
    updater = Updater(api_token, use_context=True)
    dp = updater.dispatcher
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],

        states={
            CHOOSING: [
                MessageHandler(Filters.regex('^(Upload)$'), upload_handler, pass_user_data=True),
                MessageHandler(Filters.regex('^Retrieve data$'), retrieve_data_handler, pass_user_data=True),
                MessageHandler(Filters.regex('^Update followers$'), update_followers_handler, pass_user_data=True),
                MessageHandler(Filters.regex('^Retrieve additional info$'), retrieve_additional_information_handler, pass_user_data=True),
                     ],
        },

        fallbacks=[MessageHandler(Filters.regex('^Done$'), done,  pass_user_data=True)]
    )

    dp.add_handler(conv_handler)

    # log all errors
    dp.add_error_handler(error)

    # Start the Bot
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    telegram_bot()
